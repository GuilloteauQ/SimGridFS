#+TITLE: A Parallel File-System on your machine with FUSE and SimGrid
#+AUTHOR: Quentin Guilloteau

* Journal
** <2023-07-20 Thu>

Just trying to get a simple FUSE working in C++ as i am a noob.
Currently i am following this introduction to fuse

https://www.maastaar.net/fuse/linux/filesystem/c/2016/05/21/writing-a-simple-filesystem-using-fuse/


ok seems to work like the example!

now i want to know which operations are needed to run IOR:

Let's run strace on it

#+BEGIN_EXAMPLE
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ------------------
 20.29    0.005821           9       586           read
 18.81    0.005396           5      1032           recvmsg
 13.76    0.003946           4       950       410 openat
  6.10    0.001750           6       280        10 ioctl
  5.95    0.001706           6       248           mmap
  5.46    0.001566           2       542           clock_nanosleep
  4.96    0.001424           2       709           close
  3.59    0.001029           2       396       188 newfstatat
  3.57    0.001023           6       159           sendto
  2.83    0.000811          25        32           munmap
  1.88    0.000539           3       148           socket
  1.69    0.000485         485         1           execve
  1.52    0.000435           8        52         6 futex
  1.39    0.000400           5        79           write
  1.24    0.000355          23        15           sched_setaffinity
  1.17    0.000336           3        87           mprotect
  1.13    0.000323           4        68           getdents64
  0.56    0.000161           1        85           bind
  0.38    0.000110           1        85           getsockname
  0.29    0.000083          13         6         3 mkdir
  0.29    0.000083           3        27           readlinkat
  0.25    0.000073           3        24           brk
  0.22    0.000063          63         1           shutdown
  0.21    0.000061           0        73        66 readlink
  0.19    0.000054           1        38           gettid
  0.18    0.000053           1        44           fcntl
  0.17    0.000048          48         1           connect
  0.16    0.000046           1        34           getpid
  0.13    0.000037           4         9         5 access
  0.12    0.000033           8         4           clone3
  0.08    0.000024           1        13           sched_getaffinity
  0.08    0.000022           1        19           uname
  0.08    0.000022           1        19           geteuid
  0.07    0.000021           1        14           setsockopt
  0.07    0.000019           1        17           lseek
  0.07    0.000019           3         5           sendmsg
  0.07    0.000019           1        16         1 faccessat2
  0.06    0.000018           9         2           shmdt
  0.06    0.000018           2         9           pipe2
  0.06    0.000017           5         3           shmat
  0.06    0.000017           1         9           epoll_ctl
  0.06    0.000016           8         2           mremap
  0.06    0.000016           1        13           getuid
  0.06    0.000016           2         8           statfs
  0.05    0.000015           5         3           madvise
  0.05    0.000013           0        16           rt_sigaction
  0.04    0.000012           6         2           shmget
  0.04    0.000012           2         6           shmctl
  0.04    0.000011           0        12           getegid
  0.04    0.000011           5         2         1 arch_prctl
  0.03    0.000009           1         9           rt_sigprocmask
  0.03    0.000009           2         4           process_vm_writev
  0.02    0.000007           2         3           getcwd
  0.02    0.000007           0        10           getgid
  0.02    0.000006           2         3           eventfd2
  0.02    0.000005           2         2           sched_yield
  0.02    0.000005           2         2           recvfrom
  0.02    0.000005           2         2           set_mempolicy
  0.02    0.000005           2         2           prlimit64
  0.01    0.000004           2         2           pread64
  0.01    0.000004           4         1           listen
  0.01    0.000004           2         2           unlink
  0.01    0.000004           2         2           epoll_create
  0.01    0.000003           0         4           poll
  0.01    0.000003           3         1           get_mempolicy
  0.01    0.000003           3         1           getrandom
  0.01    0.000002           2         1           sysinfo
  0.01    0.000002           2         1           set_robust_list
  0.01    0.000002           2         1           epoll_create1
  0.01    0.000002           2         1           rseq
  0.00    0.000001           1         1           getsockopt
  0.00    0.000001           1         1           sigaltstack
  0.00    0.000001           1         1           set_tid_address
  0.00    0.000000           0         1           clone
  0.00    0.000000           0         1           rmdir
------ ----------- ----------- --------- --------- ------------------
100.00    0.028682           4      6064       690 total
#+END_EXAMPLE

and this is the operations available in FUSE

#+BEGIN_SRC c
static const struct fuse_operations xmp_oper = {
	.init           = xmp_init,
	.getattr	= xmp_getattr,
	.access		= xmp_access,
	.readlink	= xmp_readlink,
	.readdir	= xmp_readdir,
	.mknod		= xmp_mknod,
	.mkdir		= xmp_mkdir,
	.symlink	= xmp_symlink,
	.unlink		= xmp_unlink,
	.rmdir		= xmp_rmdir,
	.rename		= xmp_rename,
	.link		= xmp_link,
	.chmod		= xmp_chmod,
	.chown		= xmp_chown,
	.truncate	= xmp_truncate,
#ifdef HAVE_UTIMENSAT
	.utimens	= xmp_utimens,
#endif
	.open		= xmp_open,
	.create 	= xmp_create,
	.read		= xmp_read,
	.write		= xmp_write,
	.statfs		= xmp_statfs,
	.release	= xmp_release,
	.fsync		= xmp_fsync,
#ifdef HAVE_POSIX_FALLOCATE
	.fallocate	= xmp_fallocate,
#endif
#ifdef HAVE_SETXATTR
	.setxattr	= xmp_setxattr,
	.getxattr	= xmp_getxattr,
	.listxattr	= xmp_listxattr,
	.removexattr	= xmp_removexattr,
#endif
#ifdef HAVE_COPY_FILE_RANGE
	.copy_file_range = xmp_copy_file_range,
#endif
	.lseek		= xmp_lseek,
};
#+END_SRC


- read
- open
- close
- write
- mkdir
- readlink
- access
- seek
- rmdir
- stat


but watch out! some of those sys calls could also be done to load some deps of IOR, and are actually not useful in our case!


we will implement just the interface and see



ok managed to put the fuse process in a simgrid actor


so.....
it seems impossible to put methods from a class as the fuse operations because the types will not match.

maybe using something like this could help ? https://github.com/jachappell/Fusepp

or we dont use classes at all ?!


so, the Fusepp thing seems good enough to save us.

the issue now is that the methods of FUSE are `static`, which means that they cannot access `this` and all the dynamic parts.

what i am thinking about right now is to have a class for the fuse that will be a simgrid actor.

for every FS operations that can be managed by simgrid, this fuse class will send a message via mailbox to the master class.

This master class doesnt have static parts and can then distribute the work among the workers.

oof!

finally managed to get actors to speak to each other!

the issue was that the name of the mailbox was different (i think)


So, what is the next steps?

maybe read/write ?

Alright!!

so i can read and i can write

but what simgrid sees is not what i see on the terminal



so this is the output of the fuse when i try to run ior on it

#+BEGIN_EXAMPLE
[getattr] Called
        Attributes of /testFile requested
[bob:masterfs:(3) 0.000000] [s4u_test/INFO] Create a 262144 bytes file named '/testFile' on /
[bob:masterfs:(3) 0.006554] [s4u_test/INFO] Create a 262144 bytes file named '/testFile' on /
[bob:masterfs:(3) 0.013107] [s4u_test/INFO] Create a 262144 bytes file named '/testFile' on /
[bob:masterfs:(3) 0.019661] [s4u_test/INFO] Create a 262144 bytes file named '/testFile' on /
[getattr] Called
        Attributes of /testFile requested
[bob:masterfs:(3) 0.036700] [s4u_test/INFO] Read 1048576 bytes on /testFile
fuse: read too many bytes
fuse: writing device: Invalid argument
[bob:masterfs:(3) 0.047186] [s4u_test/INFO] Read 1048576 bytes on /testFile
fuse: read too many bytes
fuse: writing device: Invalid argument
#+END_EXAMPLE

and the ior output

#+BEGIN_EXAMPLE
IOR-3.3.0: MPI Coordinated Test of Parallel I/O
Began               : Fri Jul 21 00:58:54 2023
Command line        : ior
Machine             : Linux kagel
TestID              : 0
StartTime           : Fri Jul 21 00:58:54 2023
Path                : /home/quentin/ghq/github.com/GuilloteauQ/fuse-sg/src/ici
FS                  : 0.0 GiB   Used FS: -nan%   Inodes: 0.0 Mi   Used Inodes: -nan%

Options:
api                 : POSIX
apiVersion          :
test filename       : testFile
access              : single-shared-file
type                : independent
segments            : 1
ordering in a file  : sequential
ordering inter file : no tasks offsets
nodes               : 1
tasks               : 1
clients per node    : 1
repetitions         : 1
xfersize            : 262144 bytes
blocksize           : 1 MiB
aggregate filesize  : 1 MiB

Results:

access    bw(MiB/s)  IOPS       Latency(s)  block(KiB) xfer(KiB)  open(s)    wr/rd(s)   close(s)   total(s)   iter
------    ---------  ----       ----------  ---------- ---------  --------   --------   --------   --------   ----
ior WARNING: [RANK 000]: unlink() of file "testFile" failed
, errno 38, Function not implemented
WARNING: Expected aggregate file size       = 1048576.
WARNING: Stat() of aggregate file size      = 1024.
WARNING: Using actual aggregate bytes moved = 1048576.
write     1650.83    6799       0.000147    1024.00    256.00     0.000014   0.000588   0.000003   0.000606   0
ior ERROR: read(21, 0x7f8e755be000, 262144) failed, errno 5, Input/output error (aiori-POSIX.c:550)
--------------------------------------------------------------------------
MPI_ABORT was invoked on rank 0 in communicator MPI_COMM_WORLD
with errorcode -1.

NOTE: invoking MPI_ABORT causes Open MPI to kill all MPI processes.
You may or may not see output from other processes, depending on
exactly when Open MPI kills them.
--------------------------------------------------------------------------
#+END_EXAMPLE

seems like there are some unlink issue 


the FUSE message: `fuse: read too many bytes` is also a bit weird


https://github.com/search?q=repo%3Alibfuse%2Flibfuse%20%22fuse%3A%20read%20too%20many%20bytes%22&type=code

so maybe i fucked up the return value of the read method

Ah! IOR writes 4 times to the same file and then reads it. but as i dont save anything, simgrid rewrites on the same file i think


weird, even by taking care of the seek, it doesnt seems to work...


Ah no, it seems ok somehow....

#+BEGIN_EXAMPLE
[getattr] Called
        Attributes of /testFile requested
[bob:masterfs:(3) 0.000000] [s4u_test/INFO] Openning '/testFile' on /
[bob:masterfs:(3) 0.000000] [s4u_test/INFO] Using open file
[bob:masterfs:(3) 0.000000] [s4u_test/INFO] Adding a 262144 bytes file named '/testFile' on / (offset 0)
[bob:masterfs:(3) 0.000000] [s4u_test/INFO] File /testFile of size 0
[bob:masterfs:(3) 0.006554] [s4u_test/INFO] File /testFile of size 262144
[bob:masterfs:(3) 0.006554] [s4u_test/INFO] Using open file
[bob:masterfs:(3) 0.006554] [s4u_test/INFO] Adding a 262144 bytes file named '/testFile' on / (offset 262144)
[bob:masterfs:(3) 0.006554] [s4u_test/INFO] File /testFile of size 262144
[bob:masterfs:(3) 0.013107] [s4u_test/INFO] File /testFile of size 524288
[bob:masterfs:(3) 0.013107] [s4u_test/INFO] Using open file
[bob:masterfs:(3) 0.013107] [s4u_test/INFO] Adding a 262144 bytes file named '/testFile' on / (offset 524288)
[bob:masterfs:(3) 0.013107] [s4u_test/INFO] File /testFile of size 524288
[bob:masterfs:(3) 0.019661] [s4u_test/INFO] File /testFile of size 786432
[bob:masterfs:(3) 0.019661] [s4u_test/INFO] Using open file
[bob:masterfs:(3) 0.019661] [s4u_test/INFO] Adding a 262144 bytes file named '/testFile' on / (offset 786432)
[bob:masterfs:(3) 0.019661] [s4u_test/INFO] File /testFile of size 786432
[bob:masterfs:(3) 0.026214] [s4u_test/INFO] File /testFile of size 1048576
[getattr] Called
        Attributes of /testFile requested
[bob:masterfs:(3) 0.026214] [s4u_test/INFO] Openning '/testFile' on /
[bob:masterfs:(3) 0.036700] [s4u_test/INFO] Read 1048576 bytes on /testFile (offset: 0)
[bob:masterfs:(3) 0.036700] [s4u_test/INFO] File /testFile of size 1048576
fuse: read too many bytes
fuse: writing device: Invalid argument
#+END_EXAMPLE


to investigate:

- https://github.com/libfuse/libfuse/blob/624783d73baf151747fa72359af16c37260bfee2/lib/fuse.c#L1782

- https://github.com/libfuse/libfuse/blob/624783d73baf151747fa72359af16c37260bfee2/lib/fuse.c#L1827


and now dodo

** <2023-07-21 Fri>

Ok!

let's forget for now about those "read too many bytes"

what i want to do is to have coherency between the terminal and simgrid

bah it was just a stupid mistake in the end...

i was reading the full file and not what the function wanted (oopsi)

IOR still fails because of unlink

let's implement it quickly :)

ok, implemented !

now we need to make the stat call coherent with the actuall size of the files 


Alright!!!

IOR IS COMPLETING !! YAY

#+BEGIN_EXAMPLE
IOR-3.3.0: MPI Coordinated Test of Parallel I/O
Began               : Fri Jul 21 09:54:44 2023
Command line        : ior
Machine             : Linux kagel
TestID              : 0
StartTime           : Fri Jul 21 09:54:44 2023
Path                : /home/quentin/ghq/github.com/GuilloteauQ/fuse-sg/src/ici
FS                  : 0.0 GiB   Used FS: -nan%   Inodes: 0.0 Mi   Used Inodes: -nan%

Options:
api                 : POSIX
apiVersion          :
test filename       : testFile
access              : single-shared-file
type                : independent
segments            : 1
ordering in a file  : sequential
ordering inter file : no tasks offsets
nodes               : 1
tasks               : 1
clients per node    : 1
repetitions         : 1
xfersize            : 262144 bytes
blocksize           : 1 MiB
aggregate filesize  : 1 MiB

Results:

access    bw(MiB/s)  IOPS       Latency(s)  block(KiB) xfer(KiB)  open(s)    wr/rd(s)   close(s)   total(s)   iter
------    ---------  ----       ----------  ---------- ---------  --------   --------   --------   --------   ----
write     773.77     3557.39    0.000281    1024.00    256.00     0.000164   0.001124   0.000003   0.001292   0
read      772.02     4141       0.000241    1024.00    256.00     0.000326   0.000966   0.000003   0.001295   0
remove    -          -          -           -          -          -          -          -          0.000126   0
Max Write: 773.77 MiB/sec (811.36 MB/sec)
Max Read:  772.02 MiB/sec (809.53 MB/sec)

Summary of all tests:
Operation   Max(MiB)   Min(MiB)  Mean(MiB)     StdDev   Max(OPs)   Min(OPs)  Mean(OPs)     StdDev    Mean(s) Stonewall(s) Stonewall(MiB) Test# #Tasks tPN reps fPP reord reordoff reordrand seed segcnt   blksiz    xsize aggs(MiB)   API RefNum
write         773.77     773.77     773.77       0.00    3095.07    3095.07    3095.07       0.00    0.00129         NA            NA     0      1   1    1   0     0        1         0    0      1  1048576   262144       1.0 POSIX      0
read          772.02     772.02     772.02       0.00    3088.10    3088.10    3088.10       0.00    0.00130         NA            NA     0      1   1    1   0     0        1         0    0      1  1048576   262144       1.0 POSIX      0
Finished            : Fri Jul 21 09:54:44 2023
#+END_EXAMPLE


ok i still want this coherency between simgrid and the terminal

it might be a bit annoying as the fuse class cannot have dynamic parts....

so i might just ask the master actor to store that for me


Alright !! working nice now!!


so, what is next ?

what would be awesome would be to run the smpi version of ior on the filesytem

also we should probably do a ior script instead of not passing args


Ok,

so i am trying to use the replay fonctionanlity of SMPI to integrate with the fuse+sg

https://simgrid.org/doc/latest/app_smpi.html#offline-smpi-trace-replay

but i cannot fucking make it work...

the replay.cpp does not even compile ...

#+BEGIN_EXAMPLE
[quentin@kagel:~/.../GuilloteauQ/ior-simgrid$]$ smpicxx replay.cpp -O3 -o smpi_replay
In file included from replay.cpp:7:
/nix/store/kr17fgvw275gjal7fqvhpx8j9nlqggyc-simgrid-3.32/include/simgrid/s4u/Actor.hpp:274:38: error: ‘result_of_t’ in namespace ‘std’ does not name a template type; did you mean ‘result_of’?
  274 |             typename = typename std::result_of_t<F(Args...)>
      |                                      ^~~~~~~~~~~
      |                                      result_of
/nix/store/kr17fgvw275gjal7fqvhpx8j9nlqggyc-simgrid-3.32/include/simgrid/s4u/Actor.hpp:274:49: error: expected ‘>’ before ‘<’ token
  274 |             typename = typename std::result_of_t<F(Args...)>
      |                                                 ^
/nix/store/kr17fgvw275gjal7fqvhpx8j9nlqggyc-simgrid-3.32/include/simgrid/s4u/Actor.hpp:299:38: error: ‘result_of_t’ in namespace ‘std’ does not name a template type; did you mean ‘result_of’?
  299 |             typename = typename std::result_of_t<F(Args...)>
      |                                      ^~~~~~~~~~~
      |                                      result_of
/nix/store/kr17fgvw275gjal7fqvhpx8j9nlqggyc-simgrid-3.32/include/simgrid/s4u/Actor.hpp:299:49: error: expected ‘>’ before ‘<’ token
  299 |             typename = typename std::result_of_t<F(Args...)>
      |                                                 ^
#+END_EXAMPLE


I can also add ` -trace-ti --cfg=tracing/filename:HPL_trace --cfg=smpi/display-timing:yes` to smpirun to generate ti_traces, but they do not count the posix write/read calls, just MPI calls 

i think i need to send a message on mattermost....


Message:

Hello ! Je suis un (gros) noob SimGrid et j'ai surement mal compris quelque chose.
Mon objectif (naif) est de voir si je peux simuler le comportement d'un PFS avec S4U + le plugin FS et lancer un benchmark IO ([IOR](https://ior.readthedocs.io/en/3.3/index.html) en l'occurence) en SMPI sur la même plateforme (une partie de la plateforme pour le pfs, une autre pour le benchmark).
Le problème est que le benchmark utilise une interface POSIX pour les IOs, qu'il n'est pas possible de capturer avec SimGrid (sauf si j'ai raté qqchose).
Comme un bourrin j'ai rajouté du fuse dans tout ca pour avoir un fs en S4U avec une interface posix.
Donc je peux lancer mon benchmark avec SMPI qui va faire les io en posix sur mon fs avec s4u, mais j'ai deux simulations independantes et donc le temps et les perfs retournées par le benchmark n'ont pas de sens.

Ma question est donc de savoir s'il est possible de tout lancer sur la même plateforme dans ce cas ?

** <2023-07-22 Sat>

So i added some sleep in the fuse commands to show the time taken by the disks and al.

and now it works ! I have the same performance by running *unmodified* ior on my sgfs, and with ior-smpi


The next steps (but not today) would be to clean a bit every thing

*** [1/4] TODO
- [X] CLI args, maybe ./sgfs [simgrid args] -- [fuse args]
- [ ] add time for the other simgrid file operation (open, seek)
- [ ] try to make a clean "sequential" version, then release
- [ ] start adding the parallelization of the ops
  - [ ] first just deleging to a worker
  - [ ] then sending to several workers

<2023-07-24 Mon>

did the separation of args with `--`
